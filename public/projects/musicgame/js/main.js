var song;

//what is this
THREE.Object3D.DefaultUp = new THREE.Vector3(0, 0, 1);

//checks to see if the computer is shitty
function webglAvailable() {
  try {
    var canvas = document.createElement('canvas');
    return !!(window.WebGLRenderingContext && (
      canvas.getContext('webgl') ||
      canvas.getContext('experimental-webgl')));
  } catch (e) {
    return false;
  }
}


//set camera 
var scene = new THREE.Scene();
//var camera = new THREE.PerspectiveCamera(100, window.innerWidth / window.innerHeight, 0.1, 1000);
//var camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, 0.1, 1000 );
//var camera = new THREE.OrthographicCamera( width / - 2, width / 2, height / 2, height / - 2, 1, 1000 );
//var camera = new THREE.OrthographicCamera( 50 / - 2, 50 / 2, 50 / 2, 50 / - 2, 0.1, 1000 );
var camera = new THREE.OrthographicCamera( window.innerWidth / - 2, window.innerWidth / 2, window.innerHeight / 2, window.innerHeight / - 2, -500, 1000 );
camera.zoom = 15;
camera.updateProjectionMatrix();

camera.position.set(0, 0, 25);


//look at before rotate
camera.lookAt(new THREE.Vector3(0, 0, 0));
camera.rotation.z -= Math.PI / 2;


//sets variable
//(renderer is like getelementbyid)
var renderer;
//how it will render
if (webglAvailable()) {
  renderer = new THREE.WebGLRenderer();
} else {
  renderer = new THREE.CanvasRenderer();
}


// sets the canvas size to the size of the window
renderer.setSize(window.innerWidth, window.innerHeight);
// add canvas to the document
document.body.appendChild(renderer.domElement);

// resize the canvas when the window size is changed
//window.onresize = function() {
$(window).resize(function() {
  camera.left = window.innerWidth / -2;
  camera.right = window.innerWidth / 2;
  camera.top = window.innerHeight / 2;
  camera.bottom = window.innerHeight / -2;
  //camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
});


// add stats
var stats = new Stats();
stats.setMode(0); // 0: fps, 1: ms, 2: mb
// align top-left
stats.domElement.style.position = 'absolute';
stats.domElement.style.right = '0px';
stats.domElement.style.top = '0px';
document.body.appendChild(stats.domElement);

//me
var mostFPS = 60;




// Load the background texture
/*var texture = THREE.ImageUtils.loadTexture( 'images/carsonbg.jpg' );
var backgroundMesh = new THREE.Mesh(
new THREE.PlaneGeometry(2, 2, 0),
new THREE.MeshBasicMaterial({
map: texture
}));

backgroundMesh .material.depthTest = false;
backgroundMesh .material.depthWrite = false;

// Create your background scene
var backgroundScene = new THREE.Scene();
var backgroundCamera = new THREE.Camera();
backgroundScene .add(backgroundCamera );
backgroundScene .add(backgroundMesh );*/





















var peaks,
  initialThresold = 0.9,
  thresold = initialThresold,
  minThresold = 0.3,
  minPeaks = 30;

//audio



var hitSound = new Audio('audio/hitSound.mp3');

var dieSound = new Audio('audio/dieSound.mp3');

//disables desktop scrolling with certain keys
window.addEventListener("keydown", function(e) {
  // space and arrow keys
  if ([32, 37, 38, 39, 40].indexOf(e.keyCode) > -1) {
    e.preventDefault();
  }
}, false);



//score


var score = 0
var highscore = localStorage.getItem("highscore");
if (highscore !== null) {
  if (score > highscore) {
    localStorage.setItem("highscore", score);
  } else {
    localStorage.setItem("highscore", score);
  }
}
var requiredScore = 200;
var penalty = 2;

function drawScore() {
  ctx.font = "16px Arial";
  ctx.fillStyle = "#0095DD";
  ctx.fillText("Score: " + score, 8, 20);
}

function drawHighscore() {
  ctx.font = "16px Arial"
  ctx.fillStyle = "#0095DD";
  ctx.fillText("Highscore: " + score);
}






//disables mobile scrolling
$(document).on('touchmove', function(e) {
  //e.preventDefault();
});

$(window).swipe({
  swipe: function(event, direction) {
    switch (direction) {
      case "up":
        spawnPew(1);
        break;
      case "down":
        spawnPew(2);
        break;
      case "left":
        spawnPew(3);
        break;
      case "right":
        spawnPew(4);
        break;
    }

  }
});





//floor
var platformGeometry = new THREE.BoxGeometry(50, 50, 0.1);
var material = new THREE.MeshBasicMaterial({
  color: 0xFFFFFF
});
var platform = new THREE.Mesh(platformGeometry, material);
scene.add(platform);
platform.position.z -= 2;

//background texture on seperate floor
var texture = THREE.ImageUtils.loadTexture('images/carsonbg.png');
texture.wrapS = THREE.RepeatWrapping;
texture.wrapT = THREE.RepeatWrapping;
texture.repeat.set(8, 6);
var backgroundGeometry = new THREE.BoxGeometry(500, 500, 0.1);
var material = new THREE.MeshBasicMaterial({
  map: texture
});
var background = new THREE.Mesh(backgroundGeometry, material);
scene.add(background);
background.position.z -= 10;
//background.material.depthTest = false;
//background.material.depthWrite = false;
scene.add(background);



//center cube (red)
var centerCubeGeometry = new THREE.BoxGeometry(1, 1, 1);
var material = new THREE.MeshBasicMaterial({
  color: 0xFFFF00
});
var arrowCubeGeometry = new THREE.BoxGeometry(0.5, 0.5, 0.5);


var centerCube = new THREE.Mesh(centerCubeGeometry, material);
scene.add(centerCube);

var arrowCube = new THREE.Mesh(arrowCubeGeometry, material);
scene.add(arrowCube);
arrowCube.position.y = 5;

/*var cubeGeometry = new THREE.BoxGeometry(2, 2, 2);
var material = new THREE.MeshBasicMaterial({
color: 0xFF0000
});
var centerCube2 = new THREE.Mesh(cubeGeometry, material);
scene.add(centerCube2);
centerCube2.position.y = 5;*/


//left cube (green)
/*var material = new THREE.MeshBasicMaterial({
color: 0x00FF00
});
var leftCube = new THREE.Mesh(cubeGeometry, material);
scene.add(leftCube);
leftCube.position.x = -10;
//(use += rather than = to change by)

//right cube (blue)
var material = new THREE.MeshBasicMaterial({
color: 0x0000FF
});
var rightCube = new THREE.Mesh(cubeGeometry, material);
scene.add(rightCube);
rightCube.position.x = 10;*/




//light source
var light = new THREE.PointLight(0xffffff, 1, 100);
light.position.set(0, 10, 0);
scene.add(light);

//resize
window.addEventListener('resize', function() {
  //canvas.width = window.innerWidth;
  //canvas.height = window.innerHeight;
  camera.aspect = window.innerWidth / window.innerHeight;
  camera.updateProjectionMatrix();
  renderer.setSize(window.innerWidth, window.innerHeight);
}, true);






window.requestAnimFrame = (function() {
  return window.requestAnimationFrame ||
    window.webkitRequestAnimationFrame ||
    window.mozRequestAnimationFrame ||
    function(callback) {
      window.setTimeout(callback, 1000 / 60);
      l
    };
})();



function start() {
  song = new Audio('audio/like_a_g6.mp3');
  song.volume = 0.1;
  song.play();
  
  mainLoop();
}


function mainLoop() {
  //setTimeout(function(){
  window.requestAnimFrame(mainLoop);
  //}, 1000/30);
  
  
  stats.begin();
  /*if (logReset <= 100) {
  logReset += 1;
  } else if (logReset > 100) {
  logReset = 0;
  }*/
  gameLoop();
  stats.end();
}




var isShooting = false;
var isDead = false;
var key = [];
var clock = new THREE.Clock();

var enemies = []; //(enemies)
var pews = []; //pews


var spawners = [];


//times to spawn
function cubeSpawner(color, position, times, spawnedCubeColor) {

  var cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
  var material = new THREE.MeshBasicMaterial({
    color: color
  });
  this.mesh = new THREE.Mesh(cubeGeometry, material);
  scene.add(this.mesh);
  this.mesh.position.copy(position);


  //manual times in array (broken)(cannot set specific random spawn times)
  this.times = times || []
  this.spawnedCubeColor = spawnedCubeColor;

  //every i times
  /*for (var i = 0; i < 1000; i += 2) {
  this.times.push(i);
  }*/




  // Spawn enemy cube
  this.spawnCube = function(which) {
    var cubeGeometry = new THREE.BoxGeometry(1, 1, 1);

    var material = new THREE.MeshBasicMaterial({
      color: this.spawnedCubeColor
    });


    var tempCube = new THREE.Mesh(cubeGeometry, material);
    tempCube.position.copy(this.mesh.position);
    enemies.push(tempCube);
    scene.add(tempCube);
  }

}




//spawn array for each specific 
var spawnTimes1 = [];
var spawnTimes2 = [];
var spawnTimes3 = [];
var spawnTimes4 = [];
var spawnTimes5 = [];
var spawnTimes6 = [];
var spawnTimes7 = [];
var spawnTimes8 = [];

//random spawn for 1.5 secs to 35 secs, at a .9 rate
for (var i = 1.5; i < 34.5; i += .6) {

  var rand = Math.floor(Math.random() * 4);

  switch (rand) {
    case 0:
      spawnTimes1.push(i);
      break;
    case 1:
      spawnTimes2.push(i);
      break;
    case 2:
      spawnTimes3.push(i);
      break;
    case 3:
      spawnTimes4.push(i);
      break;
      /*case 4:
        spawnTimes5.push(i);
        break;
      case 5:
        spawnTimes6.push(i);
        break;
      case 6:
        spawnTimes7.push(i);
        break;
      case 7:
        spawnTimes8.push(i);
        break;*/
  }

}

//random spawn for 34.5 secs to 50 secs, at a .25 rate
for (var i = 34.5; i < 50; i += 0.35) {
  var rand = Math.floor(Math.random() * 4);
  switch (rand) {
    case 0:
      spawnTimes1.push(i);
      break;
    case 1:
      spawnTimes2.push(i);
      break;
    case 2:
      spawnTimes3.push(i);
      break;
    case 3:
      spawnTimes4.push(i);
      break;
  }
}

//random spawn for 50 secs to 300 secs, at a .25 rate
for (var i = 50; i < 300; i += 0.25) {
  var rand = Math.floor(Math.random() * 4);
  switch (rand) {
    case 0:
      spawnTimes1.push(i);
      break;
    case 1:
      spawnTimes2.push(i);
      break;
    case 2:
      spawnTimes3.push(i);
      break;
    case 3:
      spawnTimes4.push(i);
      break;
  }
}




//var songSpawnTimes = [1342.4489795918369,1680.9977324263039,2065.192743764172,3222.8571428571427,3477.7097505668935,3838.5260770975055,5083.1292517006805,5426.984126984127,5657.755102040816,6147.369614512471,6940.294784580499,7291.224489795918,7522.766439909297,7899.183673469388,8462.766439909297,8825.963718820862,9167.891156462585,9410.385487528345,9672.743764172335,10139.682539682539,10482.97052154195,10731.156462585033,11046.167800453515,11280.816326530612,12006.167800453515,12358.253968253968,12600.63492063492,12928.004535147393,13160.408163265305,13507.460317460318,13889.682539682539,14250.068027210886,14566.621315192744,15030.680272108844,15297.460317460316,15524.51247165533,15766.235827664399,16007.573696145126,16235.578231292518,16467.687074829933,16694.46712018141,16923.832199546487,17199.569160997733,17451.541950113377,17756.893424036283,17983.90022675737,18220.47619047619,18475.62358276644,18741.72335600907,19010.907029478458,19272.743764172337,19516.2358276644,19749.478458049885,20066.145124716553,20293.673469387755,20573.87755102041,20833.945578231294,21075.873015873014,21373.44671201814,21624.852607709752,21859.20634920635,22093.7641723356,22327.482993197278,22569.95464852608,22797.097505668935,23023.877551020407,23265.986394557825,23498.93424036281,23735.28344671202,23976.712018140588,24203.582766439908,24437.34693877551,24674.104308390026,24912.04081632653,25163.7641723356,25482.92517006803,25717.14285714286,25953.401360544216,26238.820861678003,26509.38775510204,26743.44671201814,26998.43537414966,27236.031746031746,27485.260770975055,27717.687074829933,27944.48979591837,28180,28419.274376417234,28647.755102040814,28874.557823129253,29116.57596371882,29358.480725623584,29585.26077097506,29818.526077097507,30063.537414965984,30445.419501133787,30681.337868480725,30913.174603174604,31235.873015873014,31469.886621315192,31701.609977324264,31940.430839002267,32174.512471655325,32412.1768707483,32641.768707482996,32872.51700680272,33107.98185941043,33354.33106575964,33585.98639455782,33832.380952380954,34064.965986394556,34298.04988662132,34565.89569160997,34841.746031746035,35074.467120181405,35318.29931972789,35606.87074829932,35944.73922902495,36200.816326530614,36617.074829931975,36859.206349206346,37086.14512471655,37318.07256235828,37563.424036281176,37833.85487528345,38060.63492063492,38288.84353741497,38529.36507936508,38757.21088435374,39020.97505668934,39261.74603174603,39489.63718820862,39772.0634920635,40016.031746031746,40296.37188208617,40543.53741496599,40770.317460317456,41012.1768707483,41252.29024943311,41499.115646258506,41743.19727891157,41990.907029478454,42218.97959183674,42466.43990929705,42709.56916099773,42943.24263038549,43232.74376417233,43464.76190476191,43699.773242630385,44008.662131519275,44321.54195011338,44550.20408163265,44818.684807256235,45069.795918367345,45405.487528344675,45740.907029478454,46108.93424036281,46350.38548752834,46620.589569161,46864.08163265306,47378.48072562358,47618.32199546485,47991.49659863946,48225.78231292517,48488.93424036281,48780.79365079365,49155.78231292517,49427.16553287982,49712.78911564626,50063.65079365079,50367.097505668935,50643.56009070295,50878.52607709751,51164.467120181405,51398.253968253965,51632.1768707483,51859.07029478458,52093.76417233561,52326.009070294785,52554.01360544218,52797.36961451247,53024.17233560091,53266.23582766439,53499.319727891154,53735.87301587302,53967.68707482993,54194.467120181405,54423.83219954649,54694.60317460317,54950.63492063492,55186.031746031746,55483.26530612245,55720.97505668934,55975.487528344675,56238.39002267574,56476.96145124716,56743.424036281176,57015.82766439909,57279.410430839,57508.14058956916,57747.89115646259,57980.770975056694,58333.24263038549,58624.33106575963,58865.91836734694,59097.93650793651,59359.07029478458,59600.18140589569,59826.96145124717,60054.12698412698,60297.43764172336,60524.21768707483,60766.07709750567,61008.163265306124,61235.80498866213,61476.25850340136,61703.80952380953,61937.34693877551,62220.4081632653,62450.90702947846,62683.71882086168,62983.26530612245,63216.734693877544,63453.40136054422,63737.91383219955,64048.93424036281,64280.18140589569,64515.48752834467,64742.26757369614,64985.64625850341,65218.684807256235,65453.65079365079,65732.04081632654,66030.79365079365,66302.90249433107,66597.95918367346,66858.43537414966,67085.55555555556,67318.32199546485,67563.69614512472,67905.37414965987,68158.79818594104,68405.12471655328,68735.87301587302,68981.45124716553,69208.86621315192,69440.83900226757,69696.8253968254,69933.44671201814,70188.50340136055,70466.75736961451,70696.96145124716,70944.01360544217,71188.4126984127,71542.08616780044,71772.49433106575,71999.43310657596,72241.67800453515,72485.71428571428,72732.56235827664,72959.410430839,73191.22448979592,73425.03401360544,73662.06349206349,73892.74376417234,74124.14965986395,74359.29705215419,74586.14512471655,74813.6507936508,75063.51473922902,75308.04988662132,75548.59410430839,75815.78231292516,76043.44671201814,76313.6507936508,76614.0589569161,76857.75510204081,77164.5351473923,77392.94784580499,77643.28798185942,77874.10430839001,78109.63718820862,78339.47845804988,78568.7074829932,78815.89569160999,79175.01133786848,79413.37868480726,79662.87981859411,79985.26077097506,80212.04081632654,80443.12925170068,80670,80935.28344671203,81163.69614512472,81391.95011337868,81623.58276643991,81859.29705215419,82086.91609977325,82313.78684807257,82554.51247165533,82797.16553287982,83023.94557823129,83256.84807256237,83484.37641723357,83724.92063492064,83958.39002267574,84186.37188208617,84421.49659863945,84652.01814058957,84878.84353741497,85116.66666666666,85350,85584.62585034013,85811.99546485262,86049.27437641723,86279.41043083901,86508.20861678004,86754.8752834467,86984.03628117914,87215.82766439908,87459.45578231293,87691.49659863947,87918.27664399093,88155.78231292516,88409.2970521542,88648.59410430839,88882.7664399093,89125.69160997732,89355.41950113379,89582.44897959183,89809.36507936507,90036.19047619047,90275.71428571429,90504.33106575964,90736.30385487528,90965.80498866213,91208.09523809524,91436.5306122449,91665.19274376417,91895.62358276643,92124.01360544217,92379.02494331065,92605.91836734694,92833.78684807256,93088.16326530612,93316.2358276644,93546.32653061225,93774.39909297053,94026.21315192744,94253.71882086167,94486.37188208617,94750.70294784581,94981.67800453515,95209.65986394558,95436.43990929706,95669.90929705216,95900.29478458049,96129.70521541951,96358.95691609978,96586.66666666667,96814.51247165534,97042.60770975058,97281.20181405896,97524.21768707482,97751.15646258503,97983.44671201814,98213.01587301587,98440.65759637188,98707.73242630385,98940.63492063493,99168.04988662132,99396.28117913833,99624.33106575963,99881.26984126984,100109.07029478459,100336.1678004535,100584.62585034013,100812.53968253967,101039.86394557824,101267.46031746033,101507.46031746031,101743.19727891157,101970,102199.47845804988,102461.4739229025,102691.72335600907,102934.37641723357,103161.179138322,103426.28117913833,103660.83900226757,103906.91609977324,104150.43083900226,104410.22675736962,104637.68707482993,104878.91156462586,105118.0045351474,105347.07482993197,105596.73469387754,105824.3537414966,106123.87755102041,106350.77097505669,106598.91156462586,106842.31292517006,107084.96598639457,107315.98639455783,107563.74149659864,107792.06349206349,108020.8843537415,108254.76190476191,108491.95011337868,108722.6530612245,109002.92517006802,109240.45351473923,109467.95918367348,109712.06349206349,109939.56916099774,110185.73696145124,110414.8299319728,110655.60090702948,110883.10657596373,111117.91383219954,111364.14965986394,111601.26984126984,111828.68480725624,112062.01814058957,112289.84126984127,112517.77777777778,112780.40816326531,113023.08390022675,113265.3514739229,113492.13151927438,113816.41723356009,114046.71201814059,114278.16326530612,114510.9977324263,114834.96598639457,115139.02494331067,115373.80952380953,115612.44897959183,115842.6530612245,116078.68480725624,116323.26530612246,116661.90476190476,116997.89115646259,117236.09977324263,117482.83446712018,117709.61451247166,117936.39455782314,118174.26303854876,118410.09070294784,118655.28344671201,119087.18820861678,119359.38775510204,119601.06575963719,119827.84580498865,120054.62585034013,120369.79591836734,120659.75056689342,120962.19954648527,121235.8276643991,121476.9387755102,121709.18367346938,121944.44444444444,122200.06802721089,122434.9433106576,122756.78004535148,122983.56009070296,123223.37868480726,123492.4716553288,123780.49886621315,124030.40816326531,124272.74376417234,124515.78231292516,124756.2358276644,124986.62131519275,125226.30385487528,125470,125731.08843537414,125966.03174603175,126214.12698412698,126598.16326530612,126858.25396825396,127101.06575963719,127327.84580498865,127570.97505668935,127821.29251700679,128058.8888888889,128289.99999999999,128517.25623582766,128758.11791383219,128985.37414965987,129213.01587301587,129479.88662131519,129789.68253968253,130051.83673469386,130337.18820861676,130609.2970521542,130842.69841269842,131079.75056689343,131319.79591836734,131552.17687074828,131789.18367346938,132015.96371882086,132256.78004535145,132485.87301587302,132727.5283446712,132972.6984126984,133205.0566893424,133444.42176870749,133673.44671201814,133997.32426303852,134232.358276644,134459.16099773243,134761.15646258503,134990.72562358275,135230.97505668935,135484.92063492062,135740.54421768707,135968.16326530612,136232.81179138322,136459.59183673467,136692.87981859408,136929.59183673467,137170.3401360544,137398.7074829932,137639.77324263038,137882.4036281179,138109.18367346938,138350.0680272109,138576.84807256237,138819.79591836734,139047.36961451246,139289.31972789115,139516.1678004535,139756.6439909297,139985.26077097506,140224.69387755104,140453.80952380953,140694.716553288,140931.15646258503,141173.60544217686,141418.25396825396,141653.08390022677,141888.43537414965,142120.20408163266,142347.18820861678,144406.4172335601,144654.01360544216,144882.2902494331,145119.11564625852,145351.49659863944,145606.48526077098,145835.10204081633,146061.9954648526,146296.34920634923,146525.07936507935,146761.85941043086,146990.4081632653,147220.40816326533,147464.3537414966,147691.33786848074,147918.1179138322,148147.3469387755,148375.05668934243,148609.8185941043,148842.97052154195,149075.07936507938,149342.13151927438,149583.26530612246,149811.9954648526,150039.84126984127,150270.4081632653,150499.31972789115,150740.7709750567,150991.58730158728,151220.86167800453,151462.0181405896,151692.60770975056,151919.68253968252,152167.68707482994,152397.73242630388,152624.51247165533,152866.46258503402,153110.56689342405,153338.231292517,153565.62358276645,153799.20634920633,154031.4739229025,154267.36961451246,154497.91383219956,154742.17687074828,154983.56009070296,155214.85260770976,155443.03854875284,155670.1814058957,155917.61904761905,156147.73242630388,156374.716553288,156601.6326530612,156836.93877551018,157073.67346938775,157301.83673469388,157548.54875283447,157790.79365079367,158017.9365079365,158247.95918367346,158498.50340136056,158730.38548752834,158960.54421768707,159188.77551020408,159436.68934240364,159667.80045351473,159898.27664399092,160131.92743764175,160367.12018140592,160596.37188208618,160828.231292517,161055.55555555553,161295.6462585034,161540.589569161,161767.84580498867,161998.54875283447,162226.07709750568,162482.90249433107,162714.73922902497,162943.49206349207,163170.56689342402,163398.27664399092,163626.19047619047,163855.78231292515,164086.6893424036,164336.55328798186,164567.09750566893,164796.4172335601,165044.92063492062,165283.6507936508,165518.0045351474,165749.27437641725,165992.08616780047,166234.30839002266,166477.55102040817,166707.6870748299,166938.48072562358,167165.78231292515,167392.947845805,167622.9931972789,167851.768707483,168092.8798185941,168323.12925170068,168550.95238095237,168795.60090702947,169024.0589569161,169251.22448979592,169484.2857142857,169711.65532879817,169946.55328798186,170181.15646258503,170414.82993197278,170649.3424036281,170878.3446712018,171107.95918367346,171343.01587301586,171575.12471655328,171839.27437641722,172067.18820861678,172296.32653061225,172533.67346938775,172767.80045351476,172998.0045351474,173240.90702947846,173470.86167800453,173711.3605442177,173941.22448979592,174171.4058956916,174401.0657596372,174629.25170068027,174859.31972789115,175094.80725623583,175323.10657596373,175586.55328798186,175816.48526077098,176044.51247165533,176272.26757369615,176503.08390022675,176733.03854875284,176991.20181405896,177219.97732426302,177462.24489795917,177691.79138321997,177921.42857142858,178149.16099773243,178384.5804988662,178613.12925170068,178865.39682539683,179094.96598639456,179340.31746031746,179568.34467120183,179796.30385487527,180024.19501133787,180259.68253968252,180492.947845805,180734.3537414966,180961.65532879817,181190.18140589568,181451.45124716553,181683.90022675737,181918.77551020408,182150.90702947843,182378.45804988663,182615.73696145124,182852.42630385488,183090.43083900228,183334.67120181405,183561.60997732426,183794.76190476192,184029.20634920636,184268.43537414965,184497.61904761905,184726.7120181406,184963.5827664399,185207.1201814059,185433.90022675737,185661.42857142855,185897.39229024944,186124.55782312926,186355.55555555556,186586.6439909297,186836.80272108843,187071.85941043086,187302.53968253967,187543.37868480728,187779.13832199547,188017.9365079365,188247.89115646257,188485.1700680272,188713.12925170068,188958.50340136053,189185.85034013606,189417.48299319728,189645.66893424038,189880.13605442178,190115.73696145124,190343.31065759636,190591.33786848074,190819.29705215417,191046.30385487527,191292.49433106577,191519.61451247166,191751.22448979592,191983.71882086166,192219.97732426302,192459.2517006803,192693.60544217686,192921.38321995465,193148.84353741497,193378.57142857142,193606.1224489796,193842.947845805,194074.8979591837,194340.3401360544,194568.32199546485,194796.4172335601,195045.1700680272,195277.36961451248,195508.41269841272,195740.54421768707,195970.38548752834,196209.81859410432,196458.97959183675,196688.02721088435,196920.31746031746,197149.5238095238,197376.62131519275,197605.91836734692,197836.6439909297,198086.87074829932,198333.21995464852,198561.2925170068,198806.32653061225,199036.03174603175,199267.89115646257,199497.12018140592,199746.25850340136,199982.97052154195,200216.09977324263,200443.2426303855,200670.0680272109,200897.02947845805,201124.98866213154,201355.32879818595,201586.7573696145,201837.50566893423,202085.78231292518,202317.86848072562,202544.67120181405,202780.83900226757,203008.1179138322,203241.08843537414,203469.97732426302,203696.91609977323,203924.9433106576,204152.42630385485,204385.73696145124,1342.4489795918369,1680.9977324263039,2065.192743764172,3222.8571428571427,3477.7097505668935,3838.5260770975055,5083.1292517006805,5426.984126984127,5657.755102040816,6147.369614512471,6940.294784580499,7291.224489795918,7522.766439909297,7899.183673469388,8462.766439909297,8825.963718820862,9167.891156462585,9410.385487528345,9672.743764172335,10139.682539682539,10482.97052154195,10731.156462585033,11046.167800453515,11280.816326530612,12006.167800453515,12358.253968253968,12600.63492063492,12928.004535147393,13160.408163265305,13507.460317460318,13889.682539682539,14250.068027210886,14566.621315192744,15030.680272108844,15297.460317460316,15524.51247165533,15766.235827664399,16007.573696145126,16235.578231292518,16467.687074829933,16694.46712018141,16923.832199546487,17199.569160997733,17451.541950113377,17756.893424036283,17983.90022675737,18220.47619047619,18475.62358276644,18741.72335600907,19010.907029478458,19272.743764172337,19516.2358276644,19749.478458049885,20066.145124716553,20293.673469387755,20573.87755102041,20833.945578231294,21075.873015873014,21373.44671201814,21624.852607709752,21859.20634920635,22093.7641723356,22327.482993197278,22569.95464852608,22797.097505668935,23023.877551020407,23265.986394557825,23498.93424036281,23735.28344671202,23976.712018140588,24203.582766439908,24437.34693877551,24674.104308390026,24912.04081632653,25163.7641723356,25482.92517006803,25717.14285714286,25953.401360544216,26238.820861678003,26509.38775510204,26743.44671201814,26998.43537414966,27236.031746031746,27485.260770975055,27717.687074829933,27944.48979591837,28180,28419.274376417234,28647.755102040814,28874.557823129253,29116.57596371882,29358.480725623584,29585.26077097506,29818.526077097507,30063.537414965984,30445.419501133787,30681.337868480725,30913.174603174604,31235.873015873014,31469.886621315192,31701.609977324264,31940.430839002267,32174.512471655325,32412.1768707483,32641.768707482996,32872.51700680272,33107.98185941043,33354.33106575964,33585.98639455782,33832.380952380954,34064.965986394556,34298.04988662132,34565.89569160997,34841.746031746035,35074.467120181405,35318.29931972789,35606.87074829932,35944.73922902495,36200.816326530614,36617.074829931975,36859.206349206346,37086.14512471655,37318.07256235828,37563.424036281176,37833.85487528345,38060.63492063492,38288.84353741497,38529.36507936508,38757.21088435374,39020.97505668934,39261.74603174603,39489.63718820862,39772.0634920635,40016.031746031746,40296.37188208617,40543.53741496599,40770.317460317456,41012.1768707483,41252.29024943311,41499.115646258506,41743.19727891157,41990.907029478454,42218.97959183674,42466.43990929705,42709.56916099773,42943.24263038549,43232.74376417233,43464.76190476191,43699.773242630385,44008.662131519275,44321.54195011338,44550.20408163265,44818.684807256235,45069.795918367345,45405.487528344675,45740.907029478454,46108.93424036281,46350.38548752834,46620.589569161,46864.08163265306,47378.48072562358,47618.32199546485,47991.49659863946,48225.78231292517,48488.93424036281,48780.79365079365,49155.78231292517,49427.16553287982,49712.78911564626,50063.65079365079,50367.097505668935,50643.56009070295,50878.52607709751,51164.467120181405,51398.253968253965,51632.1768707483,51859.07029478458,52093.76417233561,52326.009070294785,52554.01360544218,52797.36961451247,53024.17233560091,53266.23582766439,53499.319727891154,53735.87301587302,53967.68707482993,54194.467120181405,54423.83219954649,54694.60317460317,54950.63492063492,55186.031746031746,55483.26530612245,55720.97505668934,55975.487528344675,56238.39002267574,56476.96145124716,56743.424036281176,57015.82766439909,57279.410430839,57508.14058956916,57747.89115646259,57980.770975056694,58333.24263038549,58624.33106575963,58865.91836734694,59097.93650793651,59359.07029478458,59600.18140589569,59826.96145124717,60054.12698412698,60297.43764172336,60524.21768707483,60766.07709750567,61008.163265306124,61235.80498866213,61476.25850340136,61703.80952380953,61937.34693877551,62220.4081632653,62450.90702947846,62683.71882086168,62983.26530612245,63216.734693877544,63453.40136054422,63737.91383219955,64048.93424036281,64280.18140589569,64515.48752834467,64742.26757369614,64985.64625850341,65218.684807256235,65453.65079365079,65732.04081632654,66030.79365079365,66302.90249433107,66597.95918367346,66858.43537414966,67085.55555555556,67318.32199546485,67563.69614512472,67905.37414965987,68158.79818594104,68405.12471655328,68735.87301587302,68981.45124716553,69208.86621315192,69440.83900226757,69696.8253968254,69933.44671201814,70188.50340136055,70466.75736961451,70696.96145124716,70944.01360544217,71188.4126984127,71542.08616780044,71772.49433106575,71999.43310657596,72241.67800453515,72485.71428571428,72732.56235827664,72959.410430839,73191.22448979592,73425.03401360544,73662.06349206349,73892.74376417234,74124.14965986395,74359.29705215419,74586.14512471655,74813.6507936508,75063.51473922902,75308.04988662132,75548.59410430839,75815.78231292516,76043.44671201814,76313.6507936508,76614.0589569161,76857.75510204081,77164.5351473923,77392.94784580499,77643.28798185942,77874.10430839001,78109.63718820862,78339.47845804988,78568.7074829932,78815.89569160999,79175.01133786848,79413.37868480726,79662.87981859411,79985.26077097506,80212.04081632654,80443.12925170068,80670,80935.28344671203,81163.69614512472,81391.95011337868,81623.58276643991,81859.29705215419,82086.91609977325,82313.78684807257,82554.51247165533,82797.16553287982,83023.94557823129,83256.84807256237,83484.37641723357,83724.92063492064,83958.39002267574,84186.37188208617,84421.49659863945,84652.01814058957,84878.84353741497,85116.66666666666,85350,85584.62585034013,85811.99546485262,86049.27437641723,86279.41043083901,86508.20861678004,86754.8752834467,86984.03628117914,87215.82766439908,87459.45578231293,87691.49659863947,87918.27664399093,88155.78231292516,88409.2970521542,88648.59410430839,88882.7664399093,89125.69160997732,89355.41950113379,89582.44897959183,89809.36507936507,90036.19047619047,90275.71428571429,90504.33106575964,90736.30385487528,90965.80498866213,91208.09523809524,91436.5306122449,91665.19274376417,91895.62358276643,92124.01360544217,92379.02494331065,92605.91836734694,92833.78684807256,93088.16326530612,93316.2358276644,93546.32653061225,93774.39909297053,94026.21315192744,94253.71882086167,94486.37188208617,94750.70294784581,94981.67800453515,95209.65986394558,95436.43990929706,95669.90929705216,95900.29478458049,96129.70521541951,96358.95691609978,96586.66666666667,96814.51247165534,97042.60770975058,97281.20181405896,97524.21768707482,97751.15646258503,97983.44671201814,98213.01587301587,98440.65759637188,98707.73242630385,98940.63492063493,99168.04988662132,99396.28117913833,99624.33106575963,99881.26984126984,100109.07029478459,100336.1678004535,100584.62585034013,100812.53968253967,101039.86394557824,101267.46031746033,101507.46031746031,101743.19727891157,101970,102199.47845804988,102461.4739229025,102691.72335600907,102934.37641723357,103161.179138322,103426.28117913833,103660.83900226757,103906.91609977324,104150.43083900226,104410.22675736962,104637.68707482993,104878.91156462586,105118.0045351474,105347.07482993197,105596.73469387754,105824.3537414966,106123.87755102041,106350.77097505669,106598.91156462586,106842.31292517006,107084.96598639457,107315.98639455783,107563.74149659864,107792.06349206349,108020.8843537415,108254.76190476191,108491.95011337868,108722.6530612245,109002.92517006802,109240.45351473923,109467.95918367348,109712.06349206349,109939.56916099774,110185.73696145124,110414.8299319728,110655.60090702948,110883.10657596373,111117.91383219954,111364.14965986394,111601.26984126984,111828.68480725624,112062.01814058957,112289.84126984127,112517.77777777778,112780.40816326531,113023.08390022675,113265.3514739229,113492.13151927438,113816.41723356009,114046.71201814059,114278.16326530612,114510.9977324263,114834.96598639457,115139.02494331067,115373.80952380953,115612.44897959183,115842.6530612245,116078.68480725624,116323.26530612246,116661.90476190476,116997.89115646259,117236.09977324263,117482.83446712018,117709.61451247166,117936.39455782314,118174.26303854876,118410.09070294784,118655.28344671201,119087.18820861678,119359.38775510204,119601.06575963719,119827.84580498865,120054.62585034013,120369.79591836734,120659.75056689342,120962.19954648527,121235.8276643991,121476.9387755102,121709.18367346938,121944.44444444444,122200.06802721089,122434.9433106576,122756.78004535148,122983.56009070296,123223.37868480726,123492.4716553288,123780.49886621315,124030.40816326531,124272.74376417234,124515.78231292516,124756.2358276644,124986.62131519275,125226.30385487528,125470,125731.08843537414,125966.03174603175,126214.12698412698,126598.16326530612,126858.25396825396,127101.06575963719,127327.84580498865,127570.97505668935,127821.29251700679,128058.8888888889,128289.99999999999,128517.25623582766,128758.11791383219,128985.37414965987,129213.01587301587,129479.88662131519,129789.68253968253,130051.83673469386,130337.18820861676,130609.2970521542,130842.69841269842,131079.75056689343,131319.79591836734,131552.17687074828,131789.18367346938,132015.96371882086,132256.78004535145,132485.87301587302,132727.5283446712,132972.6984126984,133205.0566893424,133444.42176870749,133673.44671201814,133997.32426303852,134232.358276644,134459.16099773243,134761.15646258503,134990.72562358275,135230.97505668935,135484.92063492062,135740.54421768707,135968.16326530612,136232.81179138322,136459.59183673467,136692.87981859408,136929.59183673467,137170.3401360544,137398.7074829932,137639.77324263038,137882.4036281179,138109.18367346938,138350.0680272109,138576.84807256237,138819.79591836734,139047.36961451246,139289.31972789115,139516.1678004535,139756.6439909297,139985.26077097506,140224.69387755104,140453.80952380953,140694.716553288,140931.15646258503,141173.60544217686,141418.25396825396,141653.08390022677,141888.43537414965,142120.20408163266,142347.18820861678,144406.4172335601,144654.01360544216,144882.2902494331,145119.11564625852,145351.49659863944,145606.48526077098,145835.10204081633,146061.9954648526,146296.34920634923,146525.07936507935,146761.85941043086,146990.4081632653,147220.40816326533,147464.3537414966,147691.33786848074,147918.1179138322,148147.3469387755,148375.05668934243,148609.8185941043,148842.97052154195,149075.07936507938,149342.13151927438,149583.26530612246,149811.9954648526,150039.84126984127,150270.4081632653,150499.31972789115,150740.7709750567,150991.58730158728,151220.86167800453,151462.0181405896,151692.60770975056,151919.68253968252,152167.68707482994,152397.73242630388,152624.51247165533,152866.46258503402,153110.56689342405,153338.231292517,153565.62358276645,153799.20634920633,154031.4739229025,154267.36961451246,154497.91383219956,154742.17687074828,154983.56009070296,155214.85260770976,155443.03854875284,155670.1814058957,155917.61904761905,156147.73242630388,156374.716553288,156601.6326530612,156836.93877551018,157073.67346938775,157301.83673469388,157548.54875283447,157790.79365079367,158017.9365079365,158247.95918367346,158498.50340136056,158730.38548752834,158960.54421768707,159188.77551020408,159436.68934240364,159667.80045351473,159898.27664399092,160131.92743764175,160367.12018140592,160596.37188208618,160828.231292517,161055.55555555553,161295.6462585034,161540.589569161,161767.84580498867,161998.54875283447,162226.07709750568,162482.90249433107,162714.73922902497,162943.49206349207,163170.56689342402,163398.27664399092,163626.19047619047,163855.78231292515,164086.6893424036,164336.55328798186,164567.09750566893,164796.4172335601,165044.92063492062,165283.6507936508,165518.0045351474,165749.27437641725,165992.08616780047,166234.30839002266,166477.55102040817,166707.6870748299,166938.48072562358,167165.78231292515,167392.947845805,167622.9931972789,167851.768707483,168092.8798185941,168323.12925170068,168550.95238095237,168795.60090702947,169024.0589569161,169251.22448979592,169484.2857142857,169711.65532879817,169946.55328798186,170181.15646258503,170414.82993197278,170649.3424036281,170878.3446712018,171107.95918367346,171343.01587301586,171575.12471655328,171839.27437641722,172067.18820861678,172296.32653061225,172533.67346938775,172767.80045351476,172998.0045351474,173240.90702947846,173470.86167800453,173711.3605442177,173941.22448979592,174171.4058956916,174401.0657596372,174629.25170068027,174859.31972789115,175094.80725623583,175323.10657596373,175586.55328798186,175816.48526077098,176044.51247165533,176272.26757369615,176503.08390022675,176733.03854875284,176991.20181405896,177219.97732426302,177462.24489795917,177691.79138321997,177921.42857142858,178149.16099773243,178384.5804988662,178613.12925170068,178865.39682539683,179094.96598639456,179340.31746031746,179568.34467120183,179796.30385487527,180024.19501133787,180259.68253968252,180492.947845805,180734.3537414966,180961.65532879817,181190.18140589568,181451.45124716553,181683.90022675737,181918.77551020408,182150.90702947843,182378.45804988663,182615.73696145124,182852.42630385488,183090.43083900228,183334.67120181405,183561.60997732426,183794.76190476192,184029.20634920636,184268.43537414965,184497.61904761905,184726.7120181406,184963.5827664399,185207.1201814059,185433.90022675737,185661.42857142855,185897.39229024944,186124.55782312926,186355.55555555556,186586.6439909297,186836.80272108843,187071.85941043086,187302.53968253967,187543.37868480728,187779.13832199547,188017.9365079365,188247.89115646257,188485.1700680272,188713.12925170068,188958.50340136053,189185.85034013606,189417.48299319728,189645.66893424038,189880.13605442178,190115.73696145124,190343.31065759636,190591.33786848074,190819.29705215417,191046.30385487527,191292.49433106577,191519.61451247166,191751.22448979592,191983.71882086166,192219.97732426302,192459.2517006803,192693.60544217686,192921.38321995465,193148.84353741497,193378.57142857142,193606.1224489796,193842.947845805,194074.8979591837,194340.3401360544,194568.32199546485,194796.4172335601,195045.1700680272,195277.36961451248,195508.41269841272,195740.54421768707,195970.38548752834,196209.81859410432,196458.97959183675,196688.02721088435,196920.31746031746,197149.5238095238,197376.62131519275,197605.91836734692,197836.6439909297,198086.87074829932,198333.21995464852,198561.2925170068,198806.32653061225,199036.03174603175,199267.89115646257,199497.12018140592,199746.25850340136,199982.97052154195,200216.09977324263,200443.2426303855,200670.0680272109,200897.02947845805,201124.98866213154,201355.32879818595,201586.7573696145,201837.50566893423,202085.78231292518,202317.86848072562,202544.67120181405,202780.83900226757,203008.1179138322,203241.08843537414,203469.97732426302,203696.91609977323,203924.9433106576,204152.42630385485,204385.73696145124];
// var songSpawnTimes = [ 0.8988208616780046, 1.1536054421768707, 1.4021995464852608, 1.6691156462585035, 1.9394557823129253, 2.241360544217687, 2.5993650793650795, 2.9590702947845804, 3.199047619047619, 3.7990702947845807, 4.039092970521542, 4.519637188208617, 4.8822222222222225, 5.455646258503402, 5.744920634920635, 6.081383219954649, 6.43938775510204, 6.693038548752835, 6.969931972789116, 7.229773242630386, 7.639092970521542, 7.879138321995465, 8.146984126984126, 8.727845804988663, 9.082244897959184, 9.434943310657596, 9.921383219954649, 10.279387755102041, 10.690566893424036, 10.999092970521541, 11.518072562358277, 11.752789115646259, 12.064739229024942, 12.329342403628118, 12.562267573696145, 12.922244897959184, 13.442743764172336, 13.806190476190476, 14.119410430839002, 14.536848072562359, 14.865759637188209, 15.165260770975056, 16.039705215419502, 16.27095238095238, 16.51281179138322, 16.750068027210883, 16.9897052154195, 17.229297052154195, 17.470272108843538, 17.69705215419501, 17.929546485260772, 18.16297052154195, 18.3946485260771, 18.623106575963718, 18.855986394557824, 19.085691609977324, 19.31251700680272, 19.539863945578233, 19.772222222222222, 20.012154195011338, 20.250430839002266, 20.489342403628118, 20.73090702947846, 20.968185941043085, 21.196485260770974, 21.428548752834466, 21.657097505668933, 21.88784580498866, 22.11575963718821, 22.347868480725623, 22.581337868480727, 22.80925170068027, 23.038072562358277, 23.265396825396824, 23.497460317460316, 23.726031746031747, 23.95281179138322, 24.190702947845804, 24.428775510204083, 24.67034013605442, 24.909773242630386, 25.15049886621315, 25.377845804988663, 25.609478458049885, 25.84297052154195, 26.075691609977323, 26.302925170068026, 26.535873015873015, 26.764467120181404, 26.99124716553288, 27.2181179138322, 27.452131519274378, 27.689410430839, 27.92825396825397, 28.15512471655329, 28.390725623582767, 28.63061224489796, 28.871609977324262, 29.108616780045352, 29.335691609977324, 29.567551020408164, 29.796031746031748, 30.027891156462584, 30.26124716553288, 30.489750566893424, 30.7181179138322, 30.945419501133788, 31.177845804988664, 31.406439909297053, 31.685328798185942, 31.940181405895693, 32.16696145124717, 32.478707482993194, 32.71541950113379, 32.961519274376414, 33.321020408163264, 33.57092970521542, 33.79861678004535, 34.039206349206346, 34.360566893424036, 34.59492063492063, 34.825646258503404, 35.239773242630385, 35.48863945578231, 35.71861678004535, 35.96034013605442, 36.30319727891156, 36.540068027210886, 36.76986394557823, 37.00473922902494, 37.23530612244898, 37.57326530612245, 37.87920634920635, 38.10634920634921, 38.359750566893425, 38.65269841269841, 38.8862358276644, 39.1137641723356, 39.48124716553288, 39.802789115646256, 40.18648526077097, 40.42895691609977, 40.678004535147394, 41.000997732426306, 41.32018140589569, 41.56267573696145, 41.79573696145125, 42.199229024943314, 42.42655328798186, 42.707800453514736, 42.94092970521542, 43.24081632653061, 43.482675736961454, 43.715714285714284, 44.064739229024944, 44.29195011337868, 44.524807256235825, 44.83764172335601, 45.16408163265306, 45.42240362811791, 45.834263038548755, 46.0778231292517, 46.30891156462585, 46.75984126984127, 47.001609977324264, 47.229115646258506, 47.459977324263036, 47.6875283446712, 47.919931972789115, 48.14743764172336, 48.38492063492063, 48.62009070294785, 48.84687074829932, 49.081156462585035, 49.30916099773243, 49.54145124716553, 49.7697052154195, 49.996485260770974, 50.22478458049886, 50.45657596371882, 50.684285714285714, 50.92095238095238, 51.148390022675734, 51.38428571428572, 51.62151927437642, 51.849410430839, 52.080385487528346, 52.30804988662131, 52.537460317460315, 52.76424036281179, 52.99657596371882, 53.22630385487528, 53.45668934240363, 53.685873015873014, 53.91297052154195, 54.14390022675737, 54.37297052154195, 54.602108843537415, 54.84743764172335, 55.08011337868481, 55.32038548752834, 55.56038548752834, 55.78748299319728, 56.01668934240363, 56.243469387755106, 56.4762358276644, 56.7047619047619, 56.93698412698413, 57.17056689342404, 57.39866213151927, 57.62587301587302, 57.854625850340135, 58.08603174603174, 58.31306122448979, 58.54070294784581, 58.767868480725625, 58.99886621315193, 59.2409977324263, 59.47680272108843, 59.70369614512472, 59.94160997732426, 60.178163265306125, 60.41619047619048, 60.68759637188209, 60.91904761904762, 61.1890022675737, 61.46691609977324, 61.72861678004535, 62.01748299319728, 62.247074829931975, 62.59424036281179, 62.842879818594106, 63.10979591836735, 63.3402947845805, 63.58668934240363, 63.83122448979592, 64.08002267573696, 64.51916099773243, 64.76369614512471, 65.24024943310657, 65.53326530612244, 65.96031746031746, 66.43424036281179, 66.68371882086167, 67.16022675736961, 67.40739229024943, 67.63587301587302, 67.88004535147392, 68.10884353741497, 68.35426303854875, 68.59977324263039, 68.82689342403629, 69.07977324263038, 69.30684807256236, 69.54113378684808, 69.76798185941043, 70.00934240362812, 70.27426303854875, 70.52140589569161, 70.88337868480725, 71.11519274376417, 71.36208616780046, 71.72006802721089, 72.03714285714285, 72.2734693877551, 72.50578231292516, 72.78918367346938, 73.02104308390022, 73.25278911564625, 73.48680272108844, 73.71571428571428, 73.94501133786848, 74.17596371882087, 74.40716553287982, 74.6737641723356, 74.90439909297052, 75.19009070294784, 75.42421768707483, 75.74632653061225, 76.1213605442177, 76.51346938775511, 76.75378684807256, 77.13877551020408, 77.47068027210884, 77.69936507936508, 77.92614512471656, 78.16081632653061, 78.40238095238095, 78.64068027210884, 78.881179138322, 79.10798185941043, 79.34020408163265, 79.56698412698412, 79.80113378684807, 80.02804988662132, 80.26124716553288, 80.48990929705215, 80.71668934240363, 80.94444444444444, 81.1770068027211, 81.40378684807256, 81.6404081632653, 81.86755102040816, 82.10451247165533, 82.34020408163265, 82.56698412698412, 82.80054421768708, 83.0274149659864, 83.25759637188209, 83.48437641723356, 83.71603174603175, 83.94503401360544, 84.17739229024943, 84.42077097505668, 84.65698412698413, 84.89061224489797, 85.11893424036282, 85.34571428571428, 85.58448979591837, 85.81972789115646, 86.06142857142858, 86.29959183673469, 86.52766439909297, 86.76616780045352, 87.00056689342404, 87.23596371882086, 87.46884353741497, 87.69566893424036, 87.92850340136054, 88.15802721088436, 88.38482993197279, 88.6124716553288, 88.84344671201814, 89.07095238095238, 89.30018140589569, 89.52700680272109, 89.76625850340136, 89.99972789115647, 90.23274376417234, 90.46145124716553, 90.688231292517, 90.91965986394558, 91.15206349206349, 91.38308390022675, 91.61349206349206, 91.84437641723356, 92.0751700680272, 92.30197278911565, 92.53340136054422, 92.76104308390023, 93.00045351473923, 93.31437641723356, 93.56149659863945, 93.90839002267573, 94.14, 94.370589569161, 94.60841269841269, 94.83607709750567, 95.23437641723356, 95.48344671201814, 95.78909297052154, 96.02344671201814, 96.25337868480726, 96.68167800453514, 96.90977324263038, 97.15437641723356, 97.40278911564626, 97.88043083900227, 98.14682539682539, 98.38972789115647, 98.61678004535148, 99.07439909297052, 99.31786848072562, 99.5458276643991, 99.80038548752835, 100.02725623582766, 100.26054421768707, 100.4897052154195, 100.72902494331066, 100.99399092970522, 101.24281179138322, 101.5674149659864, 101.79473922902494, 102.08231292517007, 102.43979591836735, 102.66839002267574, 102.91399092970522, 103.16013605442177, 103.3869387755102, 103.63954648526077, 103.86650793650794, 104.36009070294784, 104.58897959183673, 104.83401360544218, 105.07696145124717, 105.55673469387754, 105.78702947845805, 106.0208843537415, 106.27766439909297, 106.51462585034014, 106.83319727891157, 107.11863945578231, 107.34804988662131, 108.21718820861678, 108.44478458049886, 108.68083900226758, 108.91975056689343, 109.16036281179139, 109.4007029478458, 109.6275283446712, 109.86183673469388, 110.10034013605443, 110.3378231292517, 110.57102040816326, 110.80061224489796, 111.03206349206349, 111.30997732426304, 111.53707482993197, 111.7690022675737, 111.99963718820862, 112.22641723356008, 112.46458049886621, 112.70142857142856, 112.94215419501134, 113.17975056689342, 113.42235827664399, 113.64968253968254, 113.88106575963718, 114.11614512471655, 114.34895691609978, 114.57637188208616, 114.80920634920635, 115.44941043083901, 115.69160997732426, 115.92292517006803, 116.15909297052154, 116.38630385487528, 116.62530612244898, 116.8597052154195, 117.08968253968254, 117.31834467120181, 117.5597052154195, 117.78777777777778, 118.02056689342403, 118.25512471655328, 118.49766439909297, 118.72879818594105, 118.95571428571428, 119.1920634920635, 119.42539682539683, 119.65353741496598, 119.88208616780045, 120.1149433106576, 120.3418820861678, 120.58106575963718, 120.82063492063492, 121.04764172335601, 121.2802947845805, 121.52063492063492, 121.85721088435375, 122.09258503401361, 122.36018140589569, 122.62442176870748, 122.85541950113378, 123.09895691609978, 123.32768707482994, 123.58249433106576, 123.83126984126984, 124.06571428571428, 124.30038548752835, 124.5491156462585, 124.77916099773243, 125.00714285714285, 125.23569160997732, 125.4812925170068, 125.95401360544217, 126.19950113378685, 126.42648526077097, 126.67950113378684, 126.9727664399093, 127.40009070294785, 127.87401360544217, 128.12308390022676, 128.45321995464852, 128.68659863945578, 128.9229931972789, 129.1499546485261, 129.37675736961452, 129.79403628117913, 130.0395238095238, 130.26657596371882, 130.51954648526078, 130.7466439909297, 130.98099773242632, 131.20873015873016, 131.4488888888889, 131.71403628117915, 131.9631065759637, 132.26392290249433, 132.49437641723355, 132.7463038548753, 132.9868253968254, 133.22510204081632, 133.63403628117914, 133.87224489795918, 134.10696145124717, 134.3597052154195, 134.5866439909297, 134.8185941043084, 135.08131519274377, 135.32900226757369, 135.56151927437642, 135.80353741496597, 136.1456009070295, 136.38079365079366, 136.63911564625852, 136.87090702947845, 137.5340589569161, 137.95106575963717, 138.7641723356009, 138.9936507936508, 139.23034013605442, 139.45789115646258, 139.69678004535146, 139.93020408163267, 140.16319727891155, 140.39061224489797, 140.61784580498866, 140.84934240362813, 141.08142857142857, 141.3114739229025, 141.5417006802721, 141.77401360544218, 142.0174149659864, 142.24424036281178, 142.4749433106576, 142.7028798185941, 142.92993197278912, 143.17673469387756, 143.40907029478458, 143.63589569161, 143.86886621315193, 144.09589569160997, 144.32990929705215, 144.55725623582765, 144.79210884353742, 145.03428571428572, 145.26700680272108, 145.49916099773242, 145.72972789115647, 145.95650793650793, 146.18351473922903, 146.41650793650794, 146.65770975056688, 146.89120181405895, 147.130589569161, 147.37666666666667, 147.6102494331066, 147.84321995464853, 148.07111111111112, 148.29789115646258, 148.52936507936508, 148.76102040816326, 148.99238095238096, 149.22263038548752, 149.45408163265307, 149.68292517006802, 149.9097052154195, 150.14290249433105, 150.37043083900227, 150.61174603174604, 150.8445351473923, 151.07160997732427, 151.31183673469388, 151.54984126984127, 151.77727891156462, 152.00739229024944, 152.23510204081632, 152.4618820861678, 152.68875283446712, 152.92102040816326, 153.1544217687075, 153.3832879818594, 153.6102494331066, 153.8384126984127, 154.07027210884354, 161.98761904761903, 162.6741723356009, 163.15074829931973, 163.51299319727892, 163.89181405895692, 164.28024943310658, 164.59417233560092, 165.07020408163265, 165.39666666666668, 165.79199546485262, 166.07965986394558, 166.33625850340135, 166.5766439909297, 166.91950113378684, 167.1579365079365, 167.38909297052155, 168.4390022675737, 168.89544217687074, 169.6184126984127, 169.85102040816327, 170.07780045351473, 170.31047619047618, 170.55065759637188, 170.79063492063491, 171.01807256235827, 171.25471655328798, 171.4927664399093, 171.72267573696146, 171.95539682539683, 172.1838321995465, 172.41603174603173, 172.6484126984127, 172.87684807256235, 173.10362811791384, 173.3384580498866, 173.565306122449, 173.7992970521542, 174.02625850340135, 174.26471655328797, 174.50095238095238, 174.72798185941042, 174.96013605442178, 175.1870068027211, 175.41795918367347, 175.64473922902494, 175.8765306122449, 176.10467120181406, 176.33743764172337, 176.56714285714287, 176.79408163265308, 177.0252380952381, 177.2536961451247, 177.48142857142858, 177.71024943310658, 177.9407709750567, 178.1685260770975, 178.40038548752835, 178.62775510204082, 178.86054421768708, 179.1012925170068, 179.3309977324263, 179.55836734693878, 179.79219954648525, 180.0250566893424, 180.25426303854874, 180.4815192743764, 180.7084807256236, 180.94115646258504, 181.1686394557823, 181.40154195011337, 181.62832199546486, 181.86090702947845, 182.1014058956916, 182.33936507936508, 182.58197278911564, 182.80895691609976, 183.04031746031745, 183.27412698412698, 183.50489795918367, 183.73356009070295, 183.96707482993196, 184.54884353741497, 184.82702947845806, 185.0660544217687, 185.29986394557824, 185.52775510204083, 185.75786848072562, 185.9904761904762, 186.22219954648526, 186.45839002267573, 186.6866439909297, 186.91444444444446, 187.3850566893424, 187.63426303854877, 188.11079365079365, 188.35961451247167, 188.5960090702948, 188.83208616780044, 189.30480725623582, 189.55192743764172, 189.85743764172335, 190.08517006802722, 190.3359410430839, 190.5775963718821, 190.8062358276644, 191.22480725623583, 191.4742857142857, 191.9508163265306, 192.21839002267575, 192.46097505668934, 192.69124716553287, 193.14480725623582, 193.3919501133787, 193.7077551020408, 193.93467120181407, 194.22061224489795, 194.45725623582766, 194.6924263038549, 195.06482993197278, 195.30839002267572, 195.53784580498865, 195.79034013605443, 196.08215419501133, 196.3790476190476, 196.61231292517007, 196.9848299319728, 197.23195011337867, 197.5371201814059, 197.76519274376417, 198.03204081632654, 198.258820861678, 198.61925170068028, 198.97589569160996, 199.39891156462585, 200.08263038548753, 200.3412244897959, 200.58267573696145, 200.82353741496598, 201.06015873015872, 201.30061224489796, 201.54115646258504, 201.76800453514738, 202.00251700680272, 202.24102040816325, 202.474126984127, 202.7051020408163, 202.93460317460318, 203.167052154195, 203.40909297052156, 203.63587301587302, 203.87004535147392, 204.09714285714287, 204.32392290249433, 204.5609977324263, 204.78784580498865, 205.02192743764172, 205.26068027210886, 205.48746031746032, 205.7207709750567, 205.96108843537414, 206.18854875283446, 206.41653061224488, 206.64609977324264, 206.8817006802721, 207.10950113378684, 207.3372335600907, 207.56433106575963, 207.79591836734693, 208.0247619047619, 208.2622902494331, 208.50292517006804, 208.74113378684808, 208.9807482993197, 209.2209977324263, 209.44795918367348, 209.68251700680273, 209.9205215419501, 210.15421768707483, 210.38662131519274, 210.614716553288, 210.84707482993198, 211.07975056689344, 211.3146485260771, 211.54997732426304, 211.77687074829933, 212.0036961451247, 212.23945578231292, 212.46632653061224, 212.70297052154194, 212.9409977324263, 213.1677777777778, 213.39968253968254, 213.62839002267575, 213.90784580498865, 214.24448979591835, 214.54691609977326, 214.85709750566895, 215.56437641723355 ];


// for (var i = 0; i < songSpawnTimes.length; i++) {
//   var time = songSpawnTimes[i];
//   var rand = Math.floor(Math.random() * 3);
//   switch (rand) {
//     case 0:
//       spawnTimes1.push(i);
//       break;
//     case 1:
//       spawnTimes2.push(i);
//       break;
//     case 2:
//       spawnTimes3.push(i);
//       break;
//     case 3:
//       spawnTimes4.push(i);
//       break;
//   }
// }


//spawners

var leftCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(-20, 0, 0), spawnTimes1, 0x00FF00);
spawners.push(leftCubeSpawner);

var rightCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(20, 0, 0), spawnTimes2, 0xFF0000);
spawners.push(rightCubeSpawner);

var topCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(0, 20, 0), spawnTimes3, 0x0000FF);
spawners.push(topCubeSpawner);

var bottomCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(0, -20, 0), spawnTimes4, 0x0FFFF0);
spawners.push(bottomCubeSpawner);

/*var bottomRightCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(15, -15, 0), spawnTimes5, 0x000000);
spawners.push(bottomRightCubeSpawner);

var bottomLeftCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(-15, -15, 0), spawnTimes6, 0x000000);
spawners.push(bottomLeftCubeSpawner);

var topRightCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(15, 15, 0), spawnTimes7, 0x000000);
spawners.push(topRightCubeSpawner);

var topLeftCubeSpawner = new cubeSpawner(0x0000FF, new THREE.Vector3(-15, 15, 0), spawnTimes8, 0x000000);
spawners.push(topLeftCubeSpawner);*/







function removePew() {
  scene.remove(pews[pews.length - 1]);
  pews.splice(pews.length, 1);
}

function spawnPew(direction) {
  if (isDead) {
    return;
  }

  var cubeGeometry = new THREE.BoxGeometry(1, 1, 1);
  var material = new THREE.MeshBasicMaterial({
    color: 0x00FF00
  });
  var tempCube = new THREE.Mesh(cubeGeometry, material);
  tempCube.direction = direction;
  //tempCube.position.copy(centerCube.position);
  //tempCube.position = new THREE.Vector3(10, 10, 0);
  pews.push(tempCube);
  scene.add(tempCube);
}


function shoot() {

  /*if (key[38] && key[37]) {
    // up left
    //removePew();
    isShooting = true;
    spawnPew(5);
  } else if (key[38] && key[39]) {
    // up right
    //removePew();
    isShooting = true;
    spawnPew(6);
  } else if (key[40] && key[37]) {
    // down left
    //removePew();
    isShooting = true;
    spawnPew(7);
  } else if (key[40] && key[39]) {
    // down right
    //removePew();
    isShooting = true;
    spawnPew(8);*/
  if (key[38]) {
    // up arrow

    isShooting = true;
    spawnPew(1);
  } else if (key[40]) {
    // down arrow
    isShooting = true;
    spawnPew(2);
  } else if (key[37]) {
    // left arrow
    isShooting = true;
    spawnPew(3);
  } else if (key[39]) {
    // right arrow
    isShooting = true;
    spawnPew(4);
  } else if (key[32]) {
    // spacebar
    isShooting = true;
    spawnPew(1);
    spawnPew(2);
    spawnPew(3);
    spawnPew(4);

  } else if (key[102]) {
    // right numpad 6
    isShooting = true;
    spawnPew(4);
  } else if (key[100]) {
    // left numpad 4
    isShooting = true;
    spawnPew(3);
  } else if (key[104]) {
    // up numpad 8
    isShooting = true;
    spawnPew(1);
  } else if (key[98]) {
    // down numpad 2
    isShooting = true;
    spawnPew(2);
  } else if (key[101]) {
    // middle numpad 5
    isShooting = true;
    spawnPew(1);
    spawnPew(2);
    spawnPew(3);
    spawnPew(4);
  }
}



/*var joystick = new VirtualJoystick({
  mouseSupport: true,
  stationaryBase: true,
  baseX: 100,
  baseY: window.innerHeight / 2,
  strokeStyle: randomColor(),
  limitStickTravel: true
});   */



function handleKeyPress(event) {
  var state;

  if (event.type == "keyup") {
    state = false;
    setTimeout(function() {
      isShooting = false;
    }, 100);
  } else {
    state = true;
    //isShooting = true;
  }
  key[event.keyCode] = state;
  //console.log(event.keyCode);
  //console.log(event.type);
}

document.onkeydown = handleKeyPress;
document.onkeyup = handleKeyPress;





var rotating = false;
setTimeout(function() {
  rotating = true;
}, 34400);



setTimeout(function() {
  camera.rotation.z = 0;
  rotating = false;
}, 34500);


//var increaseFactor = 0;

//loop for gamestuff
function gameLoop() {




  //isDead = false;

  //spin camera

  //camera.position.y -= .01;
  //camera.position.z -= .01;
  //camera.rotation.x += .01;

  //camera rotation
  //camera.rotation.z += .001;

  //increaseFactor += .000001;
  //camera.rotation.z += increaseFactor;


  /*var cameraMove = new Date().getTime() * 0.001;

  camera.position.x = Math.cos(cameraMove) * 2;
  camera.position.y = Math.sin(cameraMove) * 2;

  var cameraRotate = new Date().getTime() * 0.001;

  camera.rotation.x = Math.cos(cameraRotate) * .1;
  camera.rotation.y = Math.sin(cameraRotate) * .1;

  // Math.PI = 180 degrees
  // 2Math.PI = 360 degrees
  if (rotating) {
    camera.rotation.z += Math.PI / 30;
  } */




  //setTimeout(function() {
  //camera.rotation.z += .1;
  //}, 34500);


  for (var i = 0; i < spawners.length; i++) {
    var spawner = spawners[i];


    var currentTime = clock.getElapsedTime();
    if (currentTime >= spawner.times[0]) {
      spawner.times.splice(0, 1);
      spawner.spawnCube();
    }
  }





  //var spawner = spawners[Math.floor(Math.random() * spawners.length)];

  /*var currentTime = clock.getElapsedTime();
  if(currentTime >= spawner.times[0]) {
  spawner.times.splice(0, 1);
  spawner.spawnCube();
  }*/

  for (var i = 0; i < enemies.length; i++) {
    var enemy = enemies[i];

    //change the speed
    var speed = 0.25;
    //var lagFactor = mostFPS/(stats.getFPS());
    //var speed = 0.25*lagFactor;

    //left
    if (enemy.position.x > 0) {
      enemy.position.x -= speed;
    }
    //right
    if (enemy.position.x < 0) {
      enemy.position.x += speed;
    }
    //bottom
    if (enemy.position.y > 0) {
      enemy.position.y -= speed;
    }
    //top
    if (enemy.position.y < 0) {
      enemy.position.y += speed;
    }
    var enemyIndex;
    //var enemyIndex = enemies.indexOf(enemy);
    if (Math.abs(enemy.position.x) < 0.5 && enemy.position.y === 0) {
      enemyIndex = enemies.indexOf(enemy);
      scene.remove(enemy);
      enemies.splice(enemyIndex, 1);
      score -= penalty;
      //isDead = true;
      //song.pause();
      dieSound.play();
    }
    if (Math.abs(enemy.position.y) < 0.5 && enemy.position.x === 0) {
      enemyIndex = enemies.indexOf(enemy);
      scene.remove(enemy);
      enemies.splice(enemyIndex, 1);
      score -= penalty;
      //isDead = true;
      //song.pause();
      dieSound.play();
    }
    if (Math.abs(enemy.position.y) > 0.5 && enemy.position.y === 0) {
      enemyIndex = enemies.indexOf(enemy);
      scene.remove(enemy);
      enemies.splice(enemyIndex, 1);
      score -= penalty;
      //isDead = true;
      //song.pause();
      dieSound.play();
    }
    if (Math.abs(enemy.position.y) > 0.5 && enemy.position.y === 0) {
      enemyIndex = enemies.indexOf(enemy);
      scene.remove(enemy);
      enemies.splice(enemyIndex, 1);
      score -= penalty;
      //isDead = true;
      //song.pause();
      dieSound.play();
    }

  }

  if (!isShooting) {
    shoot();
  }

  for (var i = 0; i < pews.length; i++) {
    var pew = pews[i];

    //change the speed
    var speed = 0.8;
    //var lagFactor = mostFPS/(stats.getFPS());
    //var speed = 0.8*lagFactor;

    //left
    if (pew.direction == 3) {
      pew.position.x -= speed;
    }
    //right
    if (pew.direction == 4) {
      pew.position.x += speed;
    }
    //bottom
    if (pew.direction == 2) {
      pew.position.y -= speed;
    }
    //top
    if (pew.direction == 1) {
      pew.position.y += speed;
    }
    if (pew.direction == 5) {
      pew.position.y += Math.sin(Math.PI / 4) * speed;
      pew.position.x -= Math.sin(Math.PI / 4) * speed;
    }
    if (pew.direction == 6) {
      pew.position.y += Math.sin(Math.PI / 4) * speed;
      pew.position.x += Math.sin(Math.PI / 4) * speed;
    }
    if (pew.direction == 7) {
      pew.position.y -= Math.sin(Math.PI / 4) * speed;
      pew.position.x -= Math.sin(Math.PI / 4) * speed;
    }
    if (pew.direction == 8) {
      pew.position.y -= Math.sin(Math.PI / 4) * speed;
      pew.position.x += Math.sin(Math.PI / 4) * speed;
    }


    //pew.rotation.y += Math.PI/6;

    //bullet with spawner
    if (Math.abs(pew.position.x) > 19.5 || Math.abs(pew.position.y) > 19.5) {
      //isDead = true;
      var pewIndex = pews.indexOf(pew);
      scene.remove(pew);
      pews.splice(pewIndex, 1);
      score -= penalty;
      //song.pause();
      dieSound.play();
    }
  }

  /*
  if (isDead) {
    $('#score').text("Game Over: " + score);
    //document.getElementById("score").innerHTML = "Game Over! Score: " + score;

    scene.remove(bullet);
    scene.remove(enemy);


    var enemyIndex = enemies.indexOf(enemy);
    enemies.splice(enemyIndex, 1);
  } else if (!isDead) {
    $('#score').text("Score: " + score);
    //document.getElementById("score").innerHTML = "Score: " + score;
    //document.getElementById("score").style.width = "200px";

  }
*/

  //bullet with enemy
  for (var i = 0; i < enemies.length; i++) {
    var enemy = enemies[i];

    for (var j = 0; j < pews.length; j++) {
      var bullet = pews[j];

      var xDistance = bullet.position.x - enemy.position.x;
      var yDistance = bullet.position.y - enemy.position.y;
      var distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
      if (distance < 1) {
        var bulletIndex = pews.indexOf(bullet);
        var enemyIndex = enemies.indexOf(enemy);
        scene.remove(bullet);
        scene.remove(enemy);
        pews.splice(bulletIndex, 1);
        enemies.splice(enemyIndex, 1);
        hitSound.pause();
        hitSound.play();
        score++;
      }
    }


  }



  //tells it to render
  renderer.render(scene, camera);
}



//loop();